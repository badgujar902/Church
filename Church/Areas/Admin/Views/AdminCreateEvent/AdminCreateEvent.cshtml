
@{
    ViewBag.Title = "AdminCreateEvent";
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
}


<style>
    .red {
        color: red;
    }

    .color {
        color: red;
    }

    .table-responsive {
        display: block;
        width: 90%;
        overflow-x: auto;
        margin-left: 0%;
        -webkit-overflow-scrolling: touch;
    }

    .Error {
        color: red;
    }
</style>

<div id="content" class="content">

    <!-- begin breadcrumb -->
    @*<ol class="breadcrumb float-xl-right">
            <li class="breadcrumb-item"><a href="#" onclick="location.href='@Url.Action("Dashboard","Leader",new { area = "Leader" })'">Dashboard</a></li>
        </ol>*@
    <!-- end breadcrumb -->
    <!-- begin page-header -->
    @*<h1 class="page-header" style="margin-left:15px;">Event Creation</h1>*@
    <!-- end page-header -->
    <!-- begin row -->
    <div class="row">
        <div id="list">
            <p class="m-b-10" style="padding-left:10px;">
                @*<a href="#" onclick="location.href='@Url.Action("EventsList", "CreateEvent",new {area="Leader" })'" class="btn btn-primary btn-sm"><i class="fas fa-lg fa-fw m-r-10 fa-list-ul" style="color:white"></i>Events List</a>*@
            </p>
        </div>
        <!-- begin col-6 -->
        <!-- end col-6 -->
        <!-- begin col-6 -->
        <div class="col-xl-12">
            <!-- begin panel -->
            <div class="panel panel-inverse" data-sortable-id="form-validation-2">
                <!-- begin panel-heading -->
                <div class="panel-heading">
                    <h4 class="panel-title">Event Creation</h4>

                </div>
                <!-- end panel-heading -->
                <!-- begin panel-body -->

                <div class="panel-body">

                    <form action="/Admin/AdminCreateEvent/SaveCreatedEvent" id="NoticeForm" method="post" data-parsley-validate="true" enctype="multipart/form-data">
                        <div class="form-group row m-b-15">
                            <label class="col-md-2 col-sm-4 col-form-label" for="website" style="text-align:left">Event Note :<span style="color:red">*</span></label>
                            <div class="col-md-9 col-sm-8">
                                <textarea class="textarea form-control" id="EventDescription" name="EventDescription" placeholder="Enter Description...." required="required" rows="6"></textarea>
                                <span id="ErrortxtDescription" class="Error"></span>
                            </div>
                        </div>
                        <div class="form-group row m-b-15">
                            <label class="col-md-2 col-sm-4 col-form-label" for="website" style="text-align:left">Select Images :<span style="color:red">*</span></label>
                            <div class="col-md-9 col-sm-8">
                                <div id="myDropzone" class="dropzone">
                                    <div class="fallback">
                                        <input name="file" type="file" multiple />
                                    </div>
                                </div>

                            </div>
                        </div>
                        <div class="form-group row m-b-15">
                            <label class="col-md-2 col-sm-4 col-form-label" for="website" style="text-align:left">Video :<span style="color:red"></span></label>
                            <div class="col-md-9 col-sm-8">
                                @Html.TextBox("VideoUrl", null, new { @class = "form-control", id = "VideoUrl", placeholder = "Enter Video Url", autocomplete = "off" })

                                @*<textarea class="textarea form-control" id="EventDescription" name="EventDescription" placeholder="Enter Description...." required="required" rows="6"></textarea>*@
                                <span id="ErrortxtDescription" class="Error"></span>
                            </div>
                        </div>


                        <div class="text-center">
                            <button type="button" id="submitFormButton" class="btn btn-sm btn-primary btn-lg m-r-5">CREATE EVENT</button>
                        </div>
                    </form>

                </div>
            </div>
        </div>
    </div>
</div>



<script>


    //Dropzone start

    Dropzone.autoDiscover = false;

    const myDropzone = new Dropzone("#myDropzone", {
        url: '/Admin/AdminCreateEvent/SaveCreatedEvent', // URL for file upload endpoint
        autoProcessQueue: false, // Do not upload files automatically
        parallelUploads: 5, // Number of files to upload in parallel
        maxFiles: 5,
        maxFilesize: 10, // Maximum file size in MB (e.g., 10 MB)
        acceptedFiles: '.jpg,.png,.jpeg,.PNG', // Accept only JPG, PNG, and JPEG files
        addRemoveLinks: true,
        init: function () {
            debugger
            this.on("addedfile", function (file) {
                var validFileTypes = ['image/jpeg', 'image/png'];
                if (!validFileTypes.includes(file.type)) {
                    showAlert("Only JPG, PNG, and JPEG files are allowed.", this);
                    this.removeFile(file);
                } else if (this.files.length > this.options.maxFiles) {
                    showAlert("You can only upload a maximum of " + this.options.maxFiles + " images.", this);
                    this.removeFile(file);
                } else if (file.size > this.options.maxFilesize * 1024 * 1024) { // Check for file size
                    showAlert("File size must not exceed " + this.options.maxFilesize + "MB.", this);
                    this.removeFile(file);
                }
            });

            this.on("error", function (file, errorMessage, xhr) {
                // Remove the error message element from Dropzone
                var errorMessageElement = file.previewElement.querySelector('.dz-error-message');
                var errorMark = file.previewElement.querySelector('.dz-error-mark');

                if (errorMessageElement) {
                    errorMessageElement.remove();
                }
                if (errorMark) {
                    errorMark.remove();
                }
                // Handle specific error messages if needed
                if (errorMessage === "File is too big") {
                    showAlert("File size must not exceed " + this.options.maxFilesize + "MB.", this);
                }
            });
        }
    });



    //Dropzone.autoDiscover = false;

    //const myDropzone = new Dropzone("#myDropzone", {
    //    url: '/Leader/CreateEvent/SaveCreatedEvent', // URL for file upload endpoint
    //    autoProcessQueue: false, // Do not upload files automatically
    //    parallelUploads: 5, // Number of files to upload in parallel
    //    maxFiles: 5,
    //    maxFilesize: 12,// Maximum number of files
    //    acceptedFiles: '.jpg,.png,.jpeg', // Accept only JPG, PNG, and JPEG files
    //    addRemoveLinks: true,
    //    init: function () {
    //        debugger;
    //        this.on("addedfile", function (file) {
    //            var validFileTypes = ['image/jpeg', 'image/png', 'image/jpeg'];
    //            if (!validFileTypes.includes(file.type)) {
    //                showAlert("Only JPG, PNG, and JPEG files are allowed.", this);
    //                this.removeFile(file);
    //            } else if (this.files.length > this.options.maxFiles) {
    //                showAlert("You can only upload a maximum of " + this.options.maxFiles + " images.", this);
    //                this.removeFile(file);
    //            }else if (file.size > this.options.maxFilesize * 1024 * 1024) { // Check for file size
    //                showAlert("File size must not exceed 1MB.", this);
    //                this.removeFile(file);
    //            }
    //        });

    //        this.on("error", function (file, errorMessage, xhr) {
    //            // Remove the error message element from Dropzone
    //            var errorMessageElement = file.previewElement.querySelector('.dz-error-message');
    //            var errorMark = file.previewElement.querySelector('.dz-error-mark');

    //            if (errorMessageElement) {
    //                errorMessageElement.remove();
    //            }
    //            if (errorMark) {
    //                errorMark.remove();
    //            }


    //        });



    //        if (errorMessage === "File is too big") {
    //            showAlert("File size must not exceed 1MB.", this);
    //        }

    //    }
    //});

    function showAlert(message, dropzone) {
        // Display confirmation dialog
        Swal.fire({
            title: 'File Upload Error',
            text: message,
            icon: 'error',
            confirmButtonColor: '#3085d6',
            confirmButtonText: 'OK'
        }).then((result) => {
            if (result.isConfirmed) {
                // Remove excess files
                while (dropzone.files.length > dropzone.options.maxFiles) {
                    dropzone.removeFile(dropzone.files[dropzone.files.length - 1]);
                }
            }
        });
    }

    Dropzone.options.myDropzone = {
        init: function() {
            this.on("addedfile", function(file) {
                // Capture the remove link
                var removeLink = document.querySelector(".dz-remove");

                // Set the click event on the remove link
                removeLink.addEventListener("click", function() {
                    // Remove the file from Dropzone
                    this.removeAllFiles();
                }.bind(this));
            });
        }
    };
    //Dropzone End

    //Dropzone.autoDiscover = false;

    //const myDropzone = new Dropzone("#myDropzone", {
    //    url: '/Leader/CreateEvent/SaveCreatedEvent', // URL for file upload endpoint
    //    autoProcessQueue: false, // Do not upload files automatically
    //    parallelUploads: 5, // Number of files to upload in parallel
    //    maxFiles: 5, // Maximum number of files
    //    acceptedFiles: 'jpg,png,jpeg', // Accept only JPG, PNG, and JPEG files
    //    addRemoveLinks: true,
    //    init: function () {
    //        debugger;
    //        this.on("addedfile", function (file) {
    //            var validFileTypes = ['image/jpeg', 'image/png', 'image/jpeg'];
    //            if (!validFileTypes.includes(file.type)) {
    //                showAlert("Only JPG, PNG, and JPEG files are allowed.", this);
    //                this.removeFile(file);
    //            } else if (this.files.length > this.options.maxFiles) {
    //                showAlert("You can only upload a maximum of " + this.options.maxFiles + " images.", this);
    //                this.removeFile(file);
    //            }
    //        });

    //        // Customize the remove link template
    //        this.on("complete", function (file) {
    //            file.previewElement.querySelector(".dz-remove").innerHTML = '<i class="fa fa-trash"></i>';
    //        });

    //    }
    //});

    //function showAlert(message, dropzone) {
    //    // Display confirmation dialog
    //    Swal.fire({
    //        title: 'File Upload Error',
    //        text: message,
    //        icon: 'error',
    //        confirmButtonColor: '#3085d6',
    //        confirmButtonText: 'OK'
    //    }).then((result) => {
    //        if (result.isConfirmed) {
    //            // Remove excess files
    //            while (dropzone.files.length > dropzone.options.maxFiles) {
    //                dropzone.removeFile(dropzone.files[dropzone.files.length - 1]);
    //            }
    //        }
    //    });
    //}


    $(document).ready(function () {
        debugger;

            $("#EventDescription").on("input", function() {
            debugger;
            $("#ErrortxtDescription").html("");
        });

        // Event listener for button click to submit form
        $("#submitFormButton").click(function () {
            debugger;

            // Gather form data including EventDescription
            var formData = new FormData();
            formData.append("EventDescription", $("#EventDescription").val());
            formData.append("VideoUrl", $("#VideoUrl").val());

            // Add files to FormData manually
            for (var i = 0; i < myDropzone.files.length; i++) {
                formData.append("file", myDropzone.files[i]);
            }

            var Description = document.getElementById("EventDescription").value;
            if(Description==null || Description=="")
            {
                $("#ErrortxtDescription").html("Please Enter Event Note");
                return false;
            }
            else
            {
                $("#ErrortxtDescription").html("");
            }
            // Submit form data with AJAX
            $(".Userloaderbg").css("display", "flex");
            //url: '/Leader/CreateEvent/SaveCreatedEvent',
            $.ajax({
                url: '@Url.Action("SaveCreatedEvent", "AdminCreateEvent")',
                method:"POST",
                data: formData,
                processData: false,  // Important: tell jQuery not to process the data
                contentType: false,  // Important: tell jQuery not to set contentType
                success: function (response) {

                    var Message1 = response.Message;
                    var Icon1 = response.Icon;
                    if (Message1 != null) {
                        $(".Userloaderbg").css("display", "none");
                        Swal.fire({
                            title: '',
                            text: Message1,
                            icon: Icon1,
                            confirmButtonColor: '#3085d6',
                            confirmButtonText: 'Ok'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                //.fade:not(.show)
                                debugger;

                                window.location.href = '@Url.Action("AdminCreateEvent", "AdminCreateEvent")';
                                console.log('User clicked confirm');
                            } else if (result.dismiss === Swal.DismissReason.cancel) {
                                // Handle when the user clicks cancel or closes the modal
                                console.log('User clicked cancel or closed the modal');
                            }
                        });


                    }
                }

            });
        });

        var Message = @Html.Raw(Json.Encode(TempData["Message"]));
        var Icon = @Html.Raw(Json.Encode(TempData["Icon"]));
        if(Message!=null)
        {
            debugger;
            Swal.fire({
                title: '',
                text: Message,
                icon: Icon,
                confirmButtonColor: '#3085d6',
                confirmButtonText: 'Ok'
            });
        }
    });//ready function




</script>





